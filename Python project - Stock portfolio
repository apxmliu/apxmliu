###stocks: Peloton(PTON), Fitbit(FIT), Nike(NKE), Lululemon(LULU)###

#For data structure and analysis
import pandas as pd
from pandas import Series, DataFrame
import numpy as np

#For data visualization
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
%matplotlib inline

#For reading data from yahoo
from pandas_datareader import data
import pandas_datareader as pdr
from pandas_datareader import data as wb

#For time stamps
from datetime import datetime

#For division
from __future__ import division

#Create my stock list
fit_list =['PTON', 'FIT', 'NKE', 'LULU']

#Set up time frame
end = datetime.now()
start = datetime(end.year-1, end.month, end.day)

#Grab yahoo finance data and set as a dataframe
for stock in fit_list:
    globals()[stock] = wb.DataReader(stock, 'yahoo', start, end)
    #for every stock in the fit list, call datareader method with 4 parameters - stock ticker, website, startdate, enddate
    #globalize the variables
    
    
###Basic Analysis###

#General info and summary stats - PTON
PTON.describe()
PTON.info()

#General info and summary stats - FIT
FIT.describe()
FIT.info()

#General info and summary stats - NKE
NKE.describe()
NKE.info()

#General info and summary stats - LULU
LULU.describe()
LULU.info()

##1) What was the change in price of the stock over time?##
PTON['Adj Close'].plot(legend = True, figsize = (10,4))

PTON['Volume'].plot(legend=True, figsize=(10,4))

##2) What was the daily return of the stock on average?## 
#Retrieve daily returns for PTON stock 
PTON['Daily Return'] = PTON['Adj Close'].pct_change() 
#create a new column called 'Daily Return', which will be the percent change of the 'Adj Close' column

#matplotlib
PTON['Daily Return'].plot(legend = True, figsize = (10,4), linestyle = '--', marker = 'o')

#seaborn
sns.distplot(PTON['Daily Return'].dropna(), bins = 100, color = 'red'

###Comparison Analysis###
##3) What was the moving avergae of the four stocks?##

ma_day = [10, 20, 50]

for ma in ma_day:
    column_name = 'MA for %s days' %(str(ma))
    PTON[column_name] = PTON['Adj Close'].rolling(ma).mean()
    
PTON[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(subplots = False, figsize = (10,4))

for ma in ma_day:
    column_name = 'MA for %s days' %(str(ma))
    FIT[column_name] = FIT['Adj Close'].rolling(ma).mean()
    
FIT[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(subplots = False, figsize = (10,4))

for ma in ma_day:
    column_name = 'MA for %s days' %(str(ma))
    NKE[column_name] = NKE['Adj Close'].rolling(ma).mean()
    
NKE[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(subplots = False, figsize = (10,4))

for ma in ma_day:
    column_name = 'MA for %s days' %(str(ma))
    LULU[column_name] = LULU['Adj Close'].rolling(ma).mean()
    
LULU[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(subplots = False, figsize = (10,4))

##4) What was the correlation between different stocks' closing prices?##
#For closing prices, create a new dataframe of all stocks' the 'Adj Close' column

closing_df = wb.DataReader(fit_list, 'yahoo', start, end)['Adj Close']

closing_df.head()

returns_fig = sns.PairGrid(closing_df.dropna())

returns_fig.map_upper(plt.scatter, color = 'purple')

returns_fig.map_lower(sns.kdeplot, cmap = 'cool_d')

returns_fig.map_diag(plt.hist, bins = 30)

#compare LULU to NKE

sns.jointplot('LULU', 'NKE', closing_df, kind = 'scatter')

##5) What was the correlation between different stocks' daily returns?##
#For daily returns, create a new vraible of all stocks' 'Adj Close' in percent change

fit_rets = closing_df.pct_change()

returns_fig = sns.PairGrid(fit_rets.dropna())

returns_fig.map_upper(plt.scatter, color = 'orange')

returns_fig.map_lower(sns.kdeplot, cmap = 'autumn')

returns_fig.map_diag(plt.hist, bins = 30)

#compare LULU to NKE

sns.jointplot('LULU', 'NKE', fit_rets, kind = 'scatter')

###Risk Analysis###
##6)How much value do we put a risk by investing in a particular stock?##
rets = fit_rets.dropna()

#define the area of these circles for the scatter plot
area = np.pi*20 

plt.scatter(x = rets.mean(), y = rets.std(), s = area)

#set x, y labels
plt.xlabel('Expected return')
plt.ylabel('Risk')

for label, x, y in zip(rets.columns, rets.mean(), rets.std()): 
#zip() allows you to call multiple functions at once
#for every column in the rets dataframe, set x=rets.mean(), y=rets.std()
    plt.annotate(
        label,
        xy = (x, y), xytext = (50, 50),
        textcoords = 'offset points', ha = 'right', va = 'bottom',
        arrowprops = dict(arrowstyle = '-', connectionstyle = 'arc3, rad=-0.3'))
    
#you want to expect a stock to give a strong/positive expected return(x), and a lower risk

##7)How can we attempt to predict future stock behavior?##
##Monte Carlo method##

#set up time horizon

#delta t - the elapsed time period
days = 365
dt = 1/days

#mu - the expected return
mu = rets.mean()['PTON'] #mu is associated with drift

#sigma - the standard deviation of returns (risk)
sigma = rets.std()['PTON']

#make a function that takes in the starting price and specified time horizon

def stock_monte_carlo(start_price, days, mu, sigma):
    #define a price array with specified time horizon
    price = np.zeros(days)
    #set the first element of the array to be the starting price
    price[0] = start_price
    
    #define a shock array with specified time horizon
    shock = np.zeros(days)
    
    #define a drift array with specified time horizon
    drift = np.zeros(days)
    
    #run the price array for a specified time horizon
    for x in range(1, days):
        #for every day we go along, calculate a shock term, which is taken from a normal distribution of that scale
        shock[x] = np.random.normal(loc = mu * dt, scale = sigma * np.sqrt(dt))
        #shock array within this time horizon is created
        
        #for every day we go along, we calculate the drift term, which is mu*dt
        drift[x] = mu * dt
        #drift array within this time horizon is created
        
        #your current price is gonna be equal to your previous price + your previous price*(that drift + that shock)
        price[x] = price[x-1] + (price[x-1] * (drift[x] + shock[x]))
        
    return price
    
PTON.head()

start_price_PTON = 27.17

#run the Monte Carlo simulation 100 times
for run in range(100):
    plt.plot(stock_monte_carlo(start_price_PTON, days, mu, sigma))
    
plt.xlabel('Days')
plt.ylabel('Price')
plt.title('Monte Carlo Analysis for Peloton')

#create an array simulation

runs = 10000

simulations = np.zeros(runs)

for run in range(runs):
    #for 10000 runs, every run in the simulation is going to be defined as the end price
    #from the plot, it is going to take the very last price point and set it as the term in this array
    simulations[run] = stock_monte_carlo(start_price_PTON, days, mu, sigma)[days-1]
    
#set up confidence interval
q = np.percentile(simulations, 1)

#plot histogram
plt.hist(simulations, bins = 200)

#use plt.figtext to fill in some additional information onto the plot

#starting price
plt.figtext(0.6, 0.8, s = 'start price: $%.2f' %start_price_PTON)

#mean ending price
plt.figtext(0.6, 0.7, 'Mean final price: $%.2f' %simulations.mean())

#variance of the price (within 99% confidence interval)
plt.figtext(0.6, 0.6, 'VaR(0.99): $%.2f' % (start_price_PTON - q,))

#display 1% quantile
plt.figtext(0.15, 0.6, 'q(0.99): $%.2f' % q)

#plot a line at that 1% quantile result
plt.axvline(x = q, linewidth = 4, color = 'r')

#title
plt.title(u'Final price distribution for Peloton stock after %s days' % days, weight = 'bold')
